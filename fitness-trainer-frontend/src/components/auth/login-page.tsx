'use client';

import { useState } from 'react';
import { useAuth } from '@/lib/auth-context';
import { Button } from '@/components/ui/button';
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { Separator } from '@/components/ui/separator';
import { toast } from 'sonner';
import {
  Dumbbell,
  User,
  UserCheck,
  Shield,
  Loader2,
  Mail,
  Lock,
} from 'lucide-react';

export function LoginPage() {
  const { quickLogin } = useAuth();
  const [isLoading, setIsLoading] = useState(false);
  const [email, setEmail] = useState('');
  const [password, setPassword] = useState('');

  const handleQuickLogin = async (type: 'trainer' | 'client' | 'admin') => {
    try {
      setIsLoading(true);
      await quickLogin(type);
      toast.success(`–í—Ö—ñ–¥ —è–∫ ${type === 'trainer' ? '—Ç—Ä–µ–Ω–µ—Ä' : type === 'client' ? '–∫–ª—ñ—î–Ω—Ç' : '–∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä'}!`);
    } catch (error) {
      console.error('Quick login failed:', error);
      toast.error('–ü–æ–º–∏–ª–∫–∞ –≤—Ö–æ–¥—É –≤ —Å–∏—Å—Ç–µ–º—É');
    } finally {
      setIsLoading(false);
    }
  };

  const handleEmailLogin = async (e: React.FormEvent) => {
    e.preventDefault();
    if (!email) {
      toast.error('–í–≤–µ–¥—ñ—Ç—å email –∞–¥—Ä–µ—Å—É');
      return;
    }

    try {
      setIsLoading(true);
      // For demo purposes, redirect to quick login based on email domain
      if (email.includes('trainer')) {
        await quickLogin('trainer');
        toast.success('–í—Ö—ñ–¥ —è–∫ —Ç—Ä–µ–Ω–µ—Ä!');
      } else if (email.includes('admin')) {
        await quickLogin('admin');
        toast.success('–í—Ö—ñ–¥ —è–∫ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä!');
      } else {
        await quickLogin('client');
        toast.success('–í—Ö—ñ–¥ —è–∫ –∫–ª—ñ—î–Ω—Ç!');
      }
    } catch (error) {
      console.error('Email login failed:', error);
      toast.error('–ü–æ–º–∏–ª–∫–∞ –≤—Ö–æ–¥—É –≤ —Å–∏—Å—Ç–µ–º—É');
    } finally {
      setIsLoading(false);
    }
  };

  return (
    <div className="min-h-screen bg-gradient-to-br from-blue-50 via-white to-yellow-50 flex items-center justify-center p-4">
      <div className="max-w-md w-full space-y-8">
        {/* Header */}
        <div className="text-center">
          <div className="flex items-center justify-center mb-6">
            <div className="bg-gradient-to-r from-blue-600 to-yellow-500 text-white p-3 rounded-xl">
              <Dumbbell className="h-8 w-8" />
            </div>
          </div>
          <h1 className="text-3xl font-bold text-gray-900">FitnessPro</h1>
          <p className="text-sm text-gray-600 mt-2">üá∫üá¶ –£–∫—Ä–∞—ó–Ω—Å—å–∫–∞ —Ñ—ñ—Ç–Ω–µ—Å –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞</p>
          <p className="text-xs text-gray-500 mt-1">–ü—Ä–æ—Ñ–µ—Å—ñ–π–Ω–∞ –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞ –¥–ª—è —Ç—Ä–µ–Ω–µ—Ä—ñ–≤ —Ç–∞ –∫–ª—ñ—î–Ω—Ç—ñ–≤</p>
        </div>

        <Card className="border-0 shadow-lg">
          <CardHeader className="text-center pb-4">
            <CardTitle>–í—Ö—ñ–¥ –≤ —Å–∏—Å—Ç–µ–º—É</CardTitle>
            <CardDescription>
              –û–±–µ—Ä—ñ—Ç—å —Ç–∏–ø –æ–±–ª—ñ–∫–æ–≤–æ–≥–æ –∑–∞–ø–∏—Å—É –¥–ª—è –≤—Ö–æ–¥—É
            </CardDescription>
          </CardHeader>

          <CardContent className="space-y-6">
            {/* Quick Login Options */}
            <div className="space-y-3">
              <h3 className="text-sm font-medium text-gray-700">–®–≤–∏–¥–∫–∏–π –≤—Ö—ñ–¥ (–¥–µ–º–æ):</h3>

              <Button
                onClick={() => handleQuickLogin('trainer')}
                disabled={isLoading}
                className="w-full bg-blue-600 hover:bg-blue-700"
                size="lg"
              >
                {isLoading ? (
                  <Loader2 className="h-4 w-4 mr-2 animate-spin" />
                ) : (
                  <UserCheck className="h-4 w-4 mr-2" />
                )}
                –£–≤—ñ–π—Ç–∏ —è–∫ –¢—Ä–µ–Ω–µ—Ä
              </Button>

              <Button
                onClick={() => handleQuickLogin('client')}
                disabled={isLoading}
                variant="outline"
                className="w-full border-blue-200 hover:bg-blue-50"
                size="lg"
              >
                {isLoading ? (
                  <Loader2 className="h-4 w-4 mr-2 animate-spin" />
                ) : (
                  <User className="h-4 w-4 mr-2" />
                )}
                –£–≤—ñ–π—Ç–∏ —è–∫ –ö–ª—ñ—î–Ω—Ç
              </Button>

              <Button
                onClick={() => handleQuickLogin('admin')}
                disabled={isLoading}
                variant="outline"
                className="w-full border-gray-200 hover:bg-gray-50"
                size="lg"
              >
                {isLoading ? (
                  <Loader2 className="h-4 w-4 mr-2 animate-spin" />
                ) : (
                  <Shield className="h-4 w-4 mr-2" />
                )}
                –£–≤—ñ–π—Ç–∏ —è–∫ –ê–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä
              </Button>
            </div>

            <Separator />

            {/* Email Login Form */}
            <form onSubmit={handleEmailLogin} className="space-y-4">
              <h3 className="text-sm font-medium text-gray-700">–í—Ö—ñ–¥ –∑ email:</h3>

              <div className="space-y-2">
                <Label htmlFor="email">Email –∞–¥—Ä–µ—Å–∞</Label>
                <div className="relative">
                  <Mail className="absolute left-3 top-1/2 transform -translate-y-1/2 h-4 w-4 text-gray-400" />
                  <Input
                    id="email"
                    type="email"
                    value={email}
                    onChange={(e) => setEmail(e.target.value)}
                    placeholder="trainer@fitnesspro.ua"
                    className="pl-10"
                    disabled={isLoading}
                  />
                </div>
              </div>

              <div className="space-y-2">
                <Label htmlFor="password">–ü–∞—Ä–æ–ª—å (–æ–ø—Ü—ñ–æ–Ω–∞–ª—å–Ω–æ)</Label>
                <div className="relative">
                  <Lock className="absolute left-3 top-1/2 transform -translate-y-1/2 h-4 w-4 text-gray-400" />
                  <Input
                    id="password"
                    type="password"
                    value={password}
                    onChange={(e) => setPassword(e.target.value)}
                    placeholder="–í–≤–µ–¥—ñ—Ç—å –ø–∞—Ä–æ–ª—å"
                    className="pl-10"
                    disabled={isLoading}
                  />
                </div>
              </div>

              <Button
                type="submit"
                disabled={isLoading}
                className="w-full bg-yellow-500 hover:bg-yellow-600 text-black"
                size="lg"
              >
                {isLoading ? (
                  <Loader2 className="h-4 w-4 mr-2 animate-spin" />
                ) : (
                  <Mail className="h-4 w-4 mr-2" />
                )}
                –£–≤—ñ–π—Ç–∏ –∑ Email
              </Button>
            </form>

            {/* Demo Info */}
            <div className="bg-blue-50 border border-blue-200 rounded-lg p-3">
              <p className="text-xs text-blue-800 text-center">
                <strong>–î–µ–º–æ-–ø–ª–∞—Ç—Ñ–æ—Ä–º–∞:</strong> –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ —à–≤–∏–¥–∫–∏–π –≤—Ö—ñ–¥ –¥–ª—è —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è.<br />
                Email –ø—ñ–¥–∫–∞–∑–∫–∏: trainer@*, client@*, admin@*
              </p>
            </div>
          </CardContent>
        </Card>

        {/* Footer */}
        <div className="text-center">
          <p className="text-xs text-gray-500">
            FitnessPro ¬© 2024 - –£–∫—Ä–∞—ó–Ω—Å—å–∫–∞ —Ñ—ñ—Ç–Ω–µ—Å –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞ –∑ LiqPay —ñ–Ω—Ç–µ–≥—Ä–∞—Ü—ñ—î—é
          </p>
          <p className="text-xs text-gray-400 mt-1">
            –ü—ñ–¥—Ç—Ä–∏–º–∫–∞ —É–∫—Ä–∞—ó–Ω—Å—å–∫–∏—Ö –≥—Ä–∏–≤–µ–Ω—å —Ç–∞ –ª–æ–∫–∞–ª—å–Ω–∏—Ö –±–∞–Ω–∫—ñ–≤
          </p>
        </div>
      </div>
    </div>
  );
}
